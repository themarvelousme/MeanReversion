"""
Main analysis script for mean reversion trading strategy
Handles output formatting, file I/O, and orchestrates the analysis
"""
import csv
import sys
import logging
from datetime import datetime
from typing import List

from data_models import MeanReversionSignal, TradingRecommendation
from mean_reversion_detector import EnhancedMeanReversionDetector


class MeanReversionAnalyzer:
    """
    Main analyzer class that orchestrates the analysis and handles output
    """
    
    def __init__(self, output_filename: str = None):
        """
        Initialize the analyzer
        
        Args:
            output_filename: File to write detailed output (if None, autogenerated)
        """
        self.detector = EnhancedMeanReversionDetector()
        
        if output_filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.output_filename = f"mean_reversion_output_{timestamp}.txt"
        else:
            self.output_filename = output_filename
    
    def run_analysis(self, stock_file: str = None, custom_symbols: List[str] = None, 
                    show_progress: bool = True, save_csv: bool = True) -> List[MeanReversionSignal]:
        """
        Run the complete mean reversion analysis
        
        Args:
            stock_file: Path to file containing stock symbols
            custom_symbols: List of custom stock symbols
            show_progress: Whether to show progress bar
            save_csv: Whether to save summary CSV file
            
        Returns:
            List of mean reversion signals
        """
        print("Starting Enhanced Mean Reversion Analysis...")
        print(f"Analysis will be saved to: {self.output_filename}")
        
        # Run the market scan
        signals = self.detector.scan_market(
            stock_file=stock_file, 
            custom_symbols=custom_symbols, 
            show_progress=show_progress
        )
        
        # Generate detailed results
        self.print_detailed_results(signals, show_recommendations=True)
        
        # Save summary CSV if requested
        if save_csv:
            csv_filename = f"summary_output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            self.save_results_to_file(signals, csv_filename)
            print(f"Summary CSV saved to: {csv_filename}")
        
        # Print summary to console
        self.print_console_summary(signals)
        
        return signals
    
    def print_console_summary(self, signals: List[MeanReversionSignal]):
        """Print a brief summary to console"""
        if not signals:
            print("\nNo mean reversion signals found.")
            return
        
        print(f"\n{'='*80}")
        print(f"ANALYSIS SUMMARY - Found {len(signals)} signals")
        print(f"{'='*80}")
        
        # Count by strength
        strength_counts = {}
        oversold_count = 0
        overbought_count = 0
        
        for signal in signals:
            strength = signal.reversion_strength
            strength_counts[strength] = strength_counts.get(strength, 0) + 1
            
            if signal.is_oversold:
                oversold_count += 1
            elif signal.is_overbought:
                overbought_count += 1
        
        print(f"Signal Strength Distribution:")
        for strength in ["Strong", "Moderate", "Weak", "None"]:
            count = strength_counts.get(strength, 0)
            print(f"  {strength}: {count}")
        
        print(f"\nSignal Types:")
        print(f"  Oversold: {oversold_count}")
        print(f"  Overbought: {overbought_count}")
        print(f"  Neutral: {len(signals) - oversold_count - overbought_count}")
        
        # Show top 5 strongest signals
        strength_order = {"Strong": 3, "Moderate": 2, "Weak": 1, "None": 0}
        top_signals = sorted(signals, 
                           key=lambda x: (strength_order.get(x.reversion_strength, 0), abs(x.z_score)), 
                           reverse=True)[:5]
        
        print(f"\nTop 5 Strongest Signals:")
        print(f"{'Symbol':<8} {'Strength':<10} {'Z-Score':<8} {'RSI':<6} {'Type':<12}")
        print(f"{'-'*50}")
        
        for signal in top_signals:
            signal_type = "OVERSOLD" if signal.is_oversold else "OVERBOUGHT" if signal.is_overbought else "NEUTRAL"
            print(f"{signal.symbol:<8} {signal.reversion_strength:<10} {signal.z_score:<8.2f} {signal.rsi:<6.1f} {signal_type:<12}")
        
        print(f"\nDetailed analysis saved to: {self.output_filename}")
        print(f"{'='*80}")
    
    def print_detailed_results(self, signals: List[MeanReversionSignal], show_recommendations: bool = True):
        """
        Write detailed analysis results and trading recommendations to the output file
        """
        if not signals:
            with open(self.output_filename, 'w') as f:
                f.write("No mean reversion signals found.\n")
            self.detector.logger.info("No mean reversion signals found.")
            return
        
        with open(self.output_filename, 'w') as f:
            f.write(f"\n{'='*100}\n")
            f.write(f"ENHANCED MEAN REVERSION ANALYSIS RESULTS ({len(signals)} signals)\n")
            f.write(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"{'='*100}\n")
            
            strength_order = {"Strong": 3, "Moderate": 2, "Weak": 1, "None": 0}
            sorted_signals = sorted(signals, 
                                  key=lambda x: (strength_order.get(x.reversion_strength, 0), abs(x.z_score)), 
                                  reverse=True)
            
            for i, signal in enumerate(sorted_signals):
                f.write(f"\n{'-'*100}\n")
                f.write(f"#{i+1}: {signal.symbol} ({signal.sector} - {signal.market_cap})\n")
                f.write(f"{'-'*100}\n")
                f.write(f"Price: ${signal.current_price:>8.2f} | Mean: ${signal.mean_price:>8.2f} | Deviation: {((signal.current_price/signal.mean_price-1)*100):>+6.1f}%\n")
                f.write(f"Z-Score: {signal.z_score:>6.2f} | RSI: {signal.rsi:>5.1f} | BB Position: {signal.bollinger_position:>5.2f}\n")
                f.write(f"Volatility: {signal.volatility:>5.1f}% | Volume Ratio: {signal.volume_ratio:>4.1f}x | 5d Change: {signal.price_change_5d:>+6.1f}%\n")
                f.write(f"Strength: {signal.reversion_strength:>8} | {'OVERSOLD' if signal.is_oversold else 'OVERBOUGHT' if signal.is_overbought else 'NEUTRAL':>10} | Hurst: {signal.hurst_exponent:>5.2f}\n")
                
                if show_recommendations:
                    recommendation = self.detector.generate_trading_recommendation(signal)
                    f.write(f"\nTRADING RECOMMENDATION:\n")
                    f.write(f"Action: {recommendation.action} | Confidence: {recommendation.confidence} | Horizon: {recommendation.time_horizon}\n")
                    
                    if recommendation.action in ["BUY_PUTS", "BUY_CALLS"]:
                        f.write(f"\nEntry Criteria:\n")
                        for criteria in recommendation.entry_criteria:
                            f.write(f"  • {criteria}\n")
                        
                        f.write(f"\nExit Criteria:\n")
                        for criteria in recommendation.exit_criteria:
                            f.write(f"  • {criteria}\n")
                        
                        f.write(f"\nRisk Factors:\n")
                        for risk in recommendation.risk_factors:
                            f.write(f"  ⚠ {risk}\n")
                        
                        f.write(f"\nEducational Notes:\n")
                        for note in recommendation.educational_notes:
                            f.write(f"  - {note}\n")
                    
                    f.write("\n" + ("-"*100) + "\n")
        
        self.detector.logger.info(f"Detailed results written to {self.output_filename}")
    
    def save_results_to_file(self, signals: List[MeanReversionSignal], filename: str):
        """Save summary results to CSV file"""
        if not signals:
            self.detector.logger.warning("No signals to save.")
            return
        
        with open(filename, 'w', newline='') as csvfile:
            fieldnames = [
                'Symbol', 'Current Price', 'Mean Price', 'Std Dev', 'Z-Score', 'RSI', 'Bollinger Position',
                'Oversold', 'Overbought', 'Reversion Strength', 'Days From Mean', 'ADF p-value', 'Hurst Exponent',
                'Volume Ratio', '5d Price Change %', 'Volatility %', 'Market Cap', 'Sector'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for s in signals:
                writer.writerow({
                    'Symbol': s.symbol,
                    'Current Price': round(s.current_price, 4),
                    'Mean Price': round(s.mean_price, 4),
                    'Std Dev': round(s.std_dev, 4),
                    'Z-Score': round(s.z_score, 4),
                    'RSI': round(s.rsi, 2),
                    'Bollinger Position': round(s.bollinger_position, 4),
                    'Oversold': s.is_oversold,
                    'Overbought': s.is_overbought,
                    'Reversion Strength': s.reversion_strength,
                    'Days From Mean': s.days_from_mean,
                    'ADF p-value': round(s.adf_pvalue, 6),
                    'Hurst Exponent': round(s.hurst_exponent, 4),
                    'Volume Ratio': round(s.volume_ratio, 2),
                    '5d Price Change %': round(s.price_change_5d, 2),
                    'Volatility %': round(s.volatility, 2),
                    'Market Cap': s.market_cap,
                    'Sector': s.sector
                })
        
        self.detector.logger.info(f"Summary results saved to {filename}")
    
    def create_sample_files(self):
        """Create sample input files for users"""
        self.detector.create_sample_stock_file("sample_stocks.csv")
        print("Sample stock list created: sample_stocks.csv")


def main():
    """
    Main entry point for the analysis script
    """
    # Parse command line arguments
    if len(sys.argv) < 2:
        print("Usage: python mean_reversion_analyzer.py <stock_list.csv> [options]")
        print("\nOptions:")
        print("  --create-sample : Create a sample stock list file")
        print("  --no-progress   : Disable progress bar")
        print("  --no-csv        : Don't save summary CSV file")
        print("\nExample:")
        print("  python mean_reversion_analyzer.py my_stocks.csv")
        print("  python mean_reversion_analyzer.py --create-sample")
        sys.exit(1)
    
    # Handle special commands
    if sys.argv[1] == "--create-sample":
        analyzer = MeanReversionAnalyzer()
        analyzer.create_sample_files()
        return
    
    # Parse options
    stock_file = sys.argv[1]
    show_progress = "--no-progress" not in sys.argv
    save_csv = "--no-csv" not in sys.argv
    
    # Create analyzer and run analysis
    analyzer = MeanReversionAnalyzer()
    
    try:
        signals = analyzer.run_analysis(
            stock_file=stock_file,
            show_progress=show_progress,
            save_csv=save_csv
        )
        
        print(f"\nAnalysis completed successfully!")
        print(f"Found {len(signals)} mean reversion signals.")
        
    except KeyboardInterrupt:
        print("\nAnalysis interrupted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\nError during analysis: {e}")
        logging.error(f"Analysis failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
